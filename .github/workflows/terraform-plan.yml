name: 'Terraform Plan'

on:
  pull_request:
    paths:
      - '**/*.tf'  # Trigger the workflow when .tf files are modified

env:
  TF_CLOUD_ORGANIZATION: "eshant-hcp-tf-test"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "learn-terraform-github-actions"
  CONFIG_DIRECTORY: "./"  # Directory where your Terraform configuration files are located

jobs:
  terraform:
    if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    # Step 1: Checkout code
    - name: Checkout
      uses: actions/checkout@v3

    # Step 2: Upload configuration to Terraform Cloud
    - name: Upload Configuration
      uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      id: plan-upload
      with:
        workspace: ${{ env.TF_WORKSPACE }}
        directory: ${{ env.CONFIG_DIRECTORY }}
        speculative: true  # Run a speculative plan

    # Step 3: Create Terraform Plan Run in Terraform Cloud
    - name: Create Plan Run
      uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      id: plan-run
      with:
        workspace: ${{ env.TF_WORKSPACE }}
        configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
        plan_only: true  # Only generate the plan, don't apply

    # Step 4: Retrieve Terraform Plan Output from Terraform Cloud
    - name: Get Full Plan Output
      id: get-full-plan
      run: |
        curl --header "Authorization: Bearer ${{ secrets.TF_API_TOKEN }}" \
             --header "Content-Type: application/vnd.api+json" \
             --request GET \
             --url "https://app.terraform.io/api/v2/runs/${{ fromJSON(steps.plan-run.outputs.payload).data.id }}/plan" \
             --output plan_output.json
        
        # Parse and store the plan output in a file to use in the next step
        PLAN_OUTPUT=$(cat plan_output.json | jq -r '.data.attributes.plan.text')
        echo "$PLAN_OUTPUT" > terraform_plan_output.txt

    # Step 5: Update the Pull Request with Terraform Plan Output
    - name: Update PR with Full Terraform Plan Output
      uses: actions/github-script@v6
      id: plan-comment
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const planOutput = fs.readFileSync('terraform_plan_output.txt', 'utf8');
          
          // Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          // Find the comment by the bot
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
          });

          // Prepare the Terraform plan output comment with the full plan text
          const output = `#### HCP Terraform Plan Output
          \`\`\`
          ${planOutput}
          \`\`\`
          `;

          // If there's an existing bot comment, delete it
          if (botComment) {
            await github.rest.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
            });
          }

          // Create a new comment with the full Terraform plan output
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output,
          });

